{"errors": [], "interfile_languages_used": [], "paths": {"scanned": ["/builds/group/proj/.gitlab-ci.yml", "/builds/group/proj/Dockerfile", "/builds/group/proj/README.md", "/builds/group/proj/api-calculator.py"]}, "results": [{"check_id": "dockerfile.security.missing-user.missing-user", "end": {"col": 37, "line": 9, "offset": 132}, "extra": {"engine_kind": "OSS", "fingerprint": "fe9977cebebd181e6f95c3bdb641474cecdacfb7d225de7a7401642c0c52d8da18f254a2051816d71d41c4ee2b101b10aa62af939341eb125a40479a09f5f248_0", "fix": "USER non-root\nCMD [\"python3\", \"api-calculator.py\"]", "is_ignored": false, "lines": "CMD [\"python3\", \"api-calculator.py\"]", "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-269: Improper Privilege Management"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A04:2021 - Insecure Design"], "references": ["https://owasp.org/Top10/A04_2021-Insecure_Design"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 20148, "rule_id": "AbUN06", "rv_id": 833486, "url": "https://semgrep.dev/playground/r/nWTy4lK/dockerfile.security.missing-user.missing-user", "version_id": "nWTy4lK"}}, "shortlink": "https://sg.run/Gbvn", "source": "https://semgrep.dev/r/dockerfile.security.missing-user.missing-user", "subcategory": ["audit"], "technology": ["dockerfile"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$...VARS": {"abstract_content": "[\"python3\"\"api-calculator.py\"]", "end": {"col": 37, "line": 9, "offset": 132}, "start": {"col": 5, "line": 9, "offset": 100}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/builds/group/proj/Dockerfile", "start": {"col": 1, "line": 9, "offset": 96}}, {"check_id": "python.flask.security.injection.nan-injection.nan-injection", "end": {"col": 37, "line": 11, "offset": 255}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 37, "line": 11, "offset": 255}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 9, "line": 11, "offset": 227}}, "float(request.args.get('a'))"]], "taint_source": ["CliLoc", [{"end": {"col": 36, "line": 11, "offset": 254}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 15, "line": 11, "offset": 233}}, "request.args.get('a')"]]}, "engine_kind": "OSS", "fingerprint": "b345fca3e6797528d499b959a677e8f0a027cd25698a8d78076efda42e5257cddbe473df6f36e92e6e70cd3564fb24b599e0fead1fcb512dbc3dde94530dc62f_0", "is_ignored": false, "lines": "    a = float(request.args.get('a'))", "message": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "references": ["https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868", "https://blog.bitdiscovery.com/2021/12/python-nan-injection/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 18276, "rule_id": "WAUdj7", "rv_id": 834488, "url": "https://semgrep.dev/playground/r/kbT2PdE/python.flask.security.injection.nan-injection.nan-injection", "version_id": "kbT2PdE"}}, "shortlink": "https://sg.run/e598", "source": "https://semgrep.dev/r/python.flask.security.injection.nan-injection.nan-injection", "subcategory": ["vuln"], "technology": ["flask"], "vulnerability_class": ["Improper Validation"]}, "metavars": {"$SOMETHING": {"abstract_content": "args", "end": {"col": 27, "line": 11, "offset": 245}, "start": {"col": 23, "line": 11, "offset": 241}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 9, "line": 11, "offset": 227}}, {"check_id": "python.flask.security.injection.nan-injection.nan-injection", "end": {"col": 37, "line": 12, "offset": 293}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 37, "line": 12, "offset": 293}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 9, "line": 12, "offset": 265}}, "float(request.args.get('b'))"]], "taint_source": ["CliLoc", [{"end": {"col": 36, "line": 12, "offset": 292}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 15, "line": 12, "offset": 271}}, "request.args.get('b')"]]}, "engine_kind": "OSS", "fingerprint": "b345fca3e6797528d499b959a677e8f0a027cd25698a8d78076efda42e5257cddbe473df6f36e92e6e70cd3564fb24b599e0fead1fcb512dbc3dde94530dc62f_1", "is_ignored": false, "lines": "    b = float(request.args.get('b'))", "message": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "references": ["https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868", "https://blog.bitdiscovery.com/2021/12/python-nan-injection/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 18276, "rule_id": "WAUdj7", "rv_id": 834488, "url": "https://semgrep.dev/playground/r/kbT2PdE/python.flask.security.injection.nan-injection.nan-injection", "version_id": "kbT2PdE"}}, "shortlink": "https://sg.run/e598", "source": "https://semgrep.dev/r/python.flask.security.injection.nan-injection.nan-injection", "subcategory": ["vuln"], "technology": ["flask"], "vulnerability_class": ["Improper Validation"]}, "metavars": {"$SOMETHING": {"abstract_content": "args", "end": {"col": 27, "line": 12, "offset": 283}, "start": {"col": 23, "line": 12, "offset": 279}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 9, "line": 12, "offset": 265}}, {"check_id": "python.flask.security.injection.nan-injection.nan-injection", "end": {"col": 37, "line": 18, "offset": 452}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 37, "line": 18, "offset": 452}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 9, "line": 18, "offset": 424}}, "float(request.args.get('a'))"]], "taint_source": ["CliLoc", [{"end": {"col": 36, "line": 18, "offset": 451}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 15, "line": 18, "offset": 430}}, "request.args.get('a')"]]}, "engine_kind": "OSS", "fingerprint": "b345fca3e6797528d499b959a677e8f0a027cd25698a8d78076efda42e5257cddbe473df6f36e92e6e70cd3564fb24b599e0fead1fcb512dbc3dde94530dc62f_2", "is_ignored": false, "lines": "    a = float(request.args.get('a'))", "message": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "references": ["https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868", "https://blog.bitdiscovery.com/2021/12/python-nan-injection/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 18276, "rule_id": "WAUdj7", "rv_id": 834488, "url": "https://semgrep.dev/playground/r/kbT2PdE/python.flask.security.injection.nan-injection.nan-injection", "version_id": "kbT2PdE"}}, "shortlink": "https://sg.run/e598", "source": "https://semgrep.dev/r/python.flask.security.injection.nan-injection.nan-injection", "subcategory": ["vuln"], "technology": ["flask"], "vulnerability_class": ["Improper Validation"]}, "metavars": {"$SOMETHING": {"abstract_content": "args", "end": {"col": 27, "line": 18, "offset": 442}, "start": {"col": 23, "line": 18, "offset": 438}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 9, "line": 18, "offset": 424}}, {"check_id": "python.flask.security.injection.nan-injection.nan-injection", "end": {"col": 37, "line": 19, "offset": 490}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 37, "line": 19, "offset": 490}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 9, "line": 19, "offset": 462}}, "float(request.args.get('b'))"]], "taint_source": ["CliLoc", [{"end": {"col": 36, "line": 19, "offset": 489}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 15, "line": 19, "offset": 468}}, "request.args.get('b')"]]}, "engine_kind": "OSS", "fingerprint": "b345fca3e6797528d499b959a677e8f0a027cd25698a8d78076efda42e5257cddbe473df6f36e92e6e70cd3564fb24b599e0fead1fcb512dbc3dde94530dc62f_3", "is_ignored": false, "lines": "    b = float(request.args.get('b'))", "message": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "references": ["https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868", "https://blog.bitdiscovery.com/2021/12/python-nan-injection/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 18276, "rule_id": "WAUdj7", "rv_id": 834488, "url": "https://semgrep.dev/playground/r/kbT2PdE/python.flask.security.injection.nan-injection.nan-injection", "version_id": "kbT2PdE"}}, "shortlink": "https://sg.run/e598", "source": "https://semgrep.dev/r/python.flask.security.injection.nan-injection.nan-injection", "subcategory": ["vuln"], "technology": ["flask"], "vulnerability_class": ["Improper Validation"]}, "metavars": {"$SOMETHING": {"abstract_content": "args", "end": {"col": 27, "line": 19, "offset": 480}, "start": {"col": 23, "line": 19, "offset": 476}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 9, "line": 19, "offset": 462}}, {"check_id": "python.flask.security.injection.nan-injection.nan-injection", "end": {"col": 37, "line": 25, "offset": 649}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 37, "line": 25, "offset": 649}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 9, "line": 25, "offset": 621}}, "float(request.args.get('a'))"]], "taint_source": ["CliLoc", [{"end": {"col": 36, "line": 25, "offset": 648}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 15, "line": 25, "offset": 627}}, "request.args.get('a')"]]}, "engine_kind": "OSS", "fingerprint": "b345fca3e6797528d499b959a677e8f0a027cd25698a8d78076efda42e5257cddbe473df6f36e92e6e70cd3564fb24b599e0fead1fcb512dbc3dde94530dc62f_4", "is_ignored": false, "lines": "    a = float(request.args.get('a'))", "message": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "references": ["https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868", "https://blog.bitdiscovery.com/2021/12/python-nan-injection/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 18276, "rule_id": "WAUdj7", "rv_id": 834488, "url": "https://semgrep.dev/playground/r/kbT2PdE/python.flask.security.injection.nan-injection.nan-injection", "version_id": "kbT2PdE"}}, "shortlink": "https://sg.run/e598", "source": "https://semgrep.dev/r/python.flask.security.injection.nan-injection.nan-injection", "subcategory": ["vuln"], "technology": ["flask"], "vulnerability_class": ["Improper Validation"]}, "metavars": {"$SOMETHING": {"abstract_content": "args", "end": {"col": 27, "line": 25, "offset": 639}, "start": {"col": 23, "line": 25, "offset": 635}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 9, "line": 25, "offset": 621}}, {"check_id": "python.flask.security.injection.nan-injection.nan-injection", "end": {"col": 37, "line": 26, "offset": 687}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 37, "line": 26, "offset": 687}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 9, "line": 26, "offset": 659}}, "float(request.args.get('b'))"]], "taint_source": ["CliLoc", [{"end": {"col": 36, "line": 26, "offset": 686}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 15, "line": 26, "offset": 665}}, "request.args.get('b')"]]}, "engine_kind": "OSS", "fingerprint": "b345fca3e6797528d499b959a677e8f0a027cd25698a8d78076efda42e5257cddbe473df6f36e92e6e70cd3564fb24b599e0fead1fcb512dbc3dde94530dc62f_5", "is_ignored": false, "lines": "    b = float(request.args.get('b'))", "message": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "references": ["https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868", "https://blog.bitdiscovery.com/2021/12/python-nan-injection/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 18276, "rule_id": "WAUdj7", "rv_id": 834488, "url": "https://semgrep.dev/playground/r/kbT2PdE/python.flask.security.injection.nan-injection.nan-injection", "version_id": "kbT2PdE"}}, "shortlink": "https://sg.run/e598", "source": "https://semgrep.dev/r/python.flask.security.injection.nan-injection.nan-injection", "subcategory": ["vuln"], "technology": ["flask"], "vulnerability_class": ["Improper Validation"]}, "metavars": {"$SOMETHING": {"abstract_content": "args", "end": {"col": 27, "line": 26, "offset": 677}, "start": {"col": 23, "line": 26, "offset": 673}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 9, "line": 26, "offset": 659}}, {"check_id": "python.flask.security.injection.nan-injection.nan-injection", "end": {"col": 37, "line": 32, "offset": 842}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 37, "line": 32, "offset": 842}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 9, "line": 32, "offset": 814}}, "float(request.args.get('a'))"]], "taint_source": ["CliLoc", [{"end": {"col": 36, "line": 32, "offset": 841}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 15, "line": 32, "offset": 820}}, "request.args.get('a')"]]}, "engine_kind": "OSS", "fingerprint": "b345fca3e6797528d499b959a677e8f0a027cd25698a8d78076efda42e5257cddbe473df6f36e92e6e70cd3564fb24b599e0fead1fcb512dbc3dde94530dc62f_6", "is_ignored": false, "lines": "    a = float(request.args.get('a'))", "message": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "references": ["https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868", "https://blog.bitdiscovery.com/2021/12/python-nan-injection/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 18276, "rule_id": "WAUdj7", "rv_id": 834488, "url": "https://semgrep.dev/playground/r/kbT2PdE/python.flask.security.injection.nan-injection.nan-injection", "version_id": "kbT2PdE"}}, "shortlink": "https://sg.run/e598", "source": "https://semgrep.dev/r/python.flask.security.injection.nan-injection.nan-injection", "subcategory": ["vuln"], "technology": ["flask"], "vulnerability_class": ["Improper Validation"]}, "metavars": {"$SOMETHING": {"abstract_content": "args", "end": {"col": 27, "line": 32, "offset": 832}, "start": {"col": 23, "line": 32, "offset": 828}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 9, "line": 32, "offset": 814}}, {"check_id": "python.flask.security.injection.nan-injection.nan-injection", "end": {"col": 37, "line": 33, "offset": 880}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 37, "line": 33, "offset": 880}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 9, "line": 33, "offset": 852}}, "float(request.args.get('b'))"]], "taint_source": ["CliLoc", [{"end": {"col": 36, "line": 33, "offset": 879}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 15, "line": 33, "offset": 858}}, "request.args.get('b')"]]}, "engine_kind": "OSS", "fingerprint": "b345fca3e6797528d499b959a677e8f0a027cd25698a8d78076efda42e5257cddbe473df6f36e92e6e70cd3564fb24b599e0fead1fcb512dbc3dde94530dc62f_7", "is_ignored": false, "lines": "    b = float(request.args.get('b'))", "message": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "references": ["https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868", "https://blog.bitdiscovery.com/2021/12/python-nan-injection/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 18276, "rule_id": "WAUdj7", "rv_id": 834488, "url": "https://semgrep.dev/playground/r/kbT2PdE/python.flask.security.injection.nan-injection.nan-injection", "version_id": "kbT2PdE"}}, "shortlink": "https://sg.run/e598", "source": "https://semgrep.dev/r/python.flask.security.injection.nan-injection.nan-injection", "subcategory": ["vuln"], "technology": ["flask"], "vulnerability_class": ["Improper Validation"]}, "metavars": {"$SOMETHING": {"abstract_content": "args", "end": {"col": 27, "line": 33, "offset": 870}, "start": {"col": 23, "line": 33, "offset": 866}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 9, "line": 33, "offset": 852}}, {"check_id": "python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host", "end": {"col": 39, "line": 40, "offset": 1101}, "extra": {"engine_kind": "OSS", "fingerprint": "20f352614a6e19c6d9c4dca0be4f75e97a50dfc0538072e64aef154b47eb0d17dbd117ce74d86cb63b413039797e1e5f4315fe5b2823c3c21c81352c2eb5c1f5_0", "is_ignored": false, "lines": "    app.run(host='0.0.0.0', port=5555)", "message": "Running flask app with host 0.0.0.0 could expose the server publicly.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-668: Exposure of Resource to Wrong Sphere"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9532, "rule_id": "L1Uy1n", "rv_id": 834471, "url": "https://semgrep.dev/playground/r/K3TrLvJ/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host", "version_id": "K3TrLvJ"}}, "shortlink": "https://sg.run/eLby", "source": "https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host", "subcategory": ["vuln"], "technology": ["flask"], "vulnerability_class": ["Other"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "/builds/group/proj/api-calculator.py", "start": {"col": 5, "line": 40, "offset": 1067}}], "skipped_rules": [], "version": "1.91.0"}