stages:
  - semgrep
  - build
  - trivy
  - deploy

scan_with_semgrep:
  stage: semgrep
  image: returntocorp/semgrep:latest
  script:
    # Статическое сканирование директории проекта
    - semgrep --config auto --json --output scanning-with-semgrep.json $CI_PROJECT_DIR
    # Сборка останавливается если обнаружена CRITICAL уязвимость
    - |
      if grep -q '"confidence": "CRITICAL"' scanning-with-semgrep.json; then
        echo "CRITICAL уязвимости найдены!"
        exit 1
      else
        echo "CRITICAL уязвимости не обнаружены."
      fi
  artifacts:
   paths:
      - scanning-with-semgrep.json # Сохранение отчета в артефакты для дальнейшего анализа

build_calculator:
  stage: build
  image: docker:latest
  services:
    - name: docker:dind # Docker-in-Docker для сборки и управления образом
  script:
    - docker build -t $HARBOR_URL/$IMAGE_NAME_TAG . # Сборка образа пуша в регистри
    - docker login $HARBOR_URL -u $HARBOR_LOGIN -p $HARBOR_PASSWORD # Авторизация в Harbor регистри
    - docker push $HARBOR_URL/$IMAGE_NAME_TAG # Пуш образа

scan_with_trivy:
  stage: trivy
  image: 
    name: aquasec/trivy:latest
    entrypoint: [""]
  script:
    # Сканирование инфраструктуры образа через trivy. Если будет найдена CRITICAL уязвимость, то пайплайн остановится
    - trivy image --exit-code 1 --severity CRITICAL --format json --output scanning-with-trivy.json $HARBOR_URL/$IMAGE_NAME_TAG
  artifacts:
    paths:
      - scanning-with-trivy.json

deploy_container:
  stage: deploy
  image: docker:latest
  services:
    - name: $HARBOR_URL/$IMAGE_NAME_TAG
      alias: api-calculator # alias для указания доменного имени в сети
  before_script:
    - apk add --no-cache curl
  script:
    - curl "http://api-calculator:5555/multiply?a=10.2313&b=0.22" # Отправка запросов для проверки работы калькулятора
    - curl "http://api-calculator:5555/"
    - curl "http://api-calculator:5555/divide?a=999&b=0"
